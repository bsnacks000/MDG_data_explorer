a = 1
b = 3
n = 6
delta_x = (b - a)/n
x = replicate(7,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(6,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 16
delta_x = (b - a)/n
x = replicate(7,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(6,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 160
delta_x = (b - a)/n
x = replicate(7,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(6,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 6
delta_x = (b - a)/n
x = replicate(7,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(6,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 6
delta_x = (b - a)/n
x = replicate(n+1,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(n,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 16
delta_x = (b - a)/n
x = replicate(n+1,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(n,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 160
delta_x = (b - a)/n
x = replicate(n+1,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(n,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 1600
delta_x = (b - a)/n
x = replicate(n+1,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(n,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 10000
delta_x = (b - a)/n
x = replicate(n+1,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(n,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 1000
delta_x = (b - a)/n
x = replicate(n+1,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(n,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
a = 1
b = 3
n = 5000
delta_x = (b - a)/n
x = replicate(n+1,0)
x[1] = a
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)
}
x_star = replicate(n,0)
## calculate midpoints
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2
}
f = function(x) {3 * x ^2 + 4 * x }
M = delta_x * sum(f(x_star))
View(f)
a = 1
b = 3
n = 5000                   # extremely small n
f = function(x) {3 * x ^2 + 4 * x }
midpoint_appx = function(a, b, n, f){
delta_x = (b - a)/n
x = replicate(n+1,0)
x[1] = a    # set first value
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)    # calculate interval widths
}
x_star = replicate(n,0)
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2     ## calculate midpoints for x intervals
}
return(delta_x * sum(f(x_star)))    ## return midpoint summation
}
areas = replicate(7,0)
for (i in 1:7){
vals[i] = midpoint_appx(a,b,n,f)
n = n^2
}
areas = replicate(7,0)
for (i in 1:7){
areas[i] = midpoint_appx(a,b,n,f)
n = n^2
}
a = 1
b = 3
n = 10
f = function(x) {3 * x ^2 + 4 * x }
# areas converge at greater values of n
areas = replicate(7,0)
for (i in 1:7){
areas[i] = midpoint_appx(a,b,n,f)
n = n * 2
}
a = 1
b = 3
n = 10
f = function(x) {3 * x^2 + 4 * x }
areas = replicate(7,0)
for (i in 1:7){
areas[i] = midpoint_appx(a,b,n,f)
n = n * 2
}
a = 1
b = 3
n = 10
f = function(x) {3 * x^2 + 4 * x }
midpoint_appx(a,b,n,f)
n = 100
n = 10
midpoint_appx(a,b,n,f)
n = 100
midpoint_appx(a,b,n,f)
midpoint_appx = function(a, b, n, f){
delta_x = (b - a)/n
x = replicate(n+1,0)
x[1] = a    # set first value
for (i in (2:length(x))){
x[i] = (x[i-1] + delta_x)    # calculate interval widths
}
x_star = replicate(n,0)
for (i in (1:length(x)-1)){
x_star[i] = (x[i] + x[i+1])/2     ## calculate midpoints for x intervals
}
return(delta_x * sum(f(x_star)))    ## return midpoint summation
}
a = 1
b = 3
f = function(x) {3 * x^2 + 4 * x }
# areas converge at greater values of n
n = 10
midpoint_appx(a,b,n,f)
n = 100
midpoint_appx(a,b,n,f)
n = 1000
midpoint_appx(a,b,n,f)
n = 5
midpoint_appx(a,b,n,f)
n = 10
midpoint_appx(a,b,n,f)
n = 100
midpoint_appx(a,b,n,f)
n = 1000
midpoint_appx(a,b,n,f)
n = 6
midpoint_appx(a,b,n,f)
n = 5
midpoint_appx(a,b,n,f)
n = 10
midpoint_appx(a,b,n,f)
n = 100
midpoint_appx(a,b,n,f)
n = 1000
midpoint_appx(a,b,n,f)
library(shiny)
library(shiny)
ui = fluidPage()
server = function(input, output){}
shinyApp(ui=ui, server=server)
ui = fluidPage("Hello World")
library(shiny)
ui = fluidPage("Hello World")
server = function(input, output){}
shinyApp(ui=ui, server=server)
library(shiny)
ui = fluidPage(
sliderInput(
inputId = "num",label = "Choose Number",min = 1,max = 100, value = 25
)
)
server = function(input, output){}
shinyApp(ui=ui, server=server)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/widget_app.r', echo=TRUE)
library(shiny)
source('~/Documents/CUNY/Viz/Shiny/oberve_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/oberve_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/oberve_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/oberve_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/reactive_vals_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/reactive_vals_app.r', echo=TRUE)
source('~/Documents/CUNY/Viz/Shiny/reactive_vals_app.r', echo=TRUE)
library(googleVis)
library(tidyr)
library(dplyr)
library(stringr)
setwd("~")
data_death = read.csv("Data/IS608/mdg_tuberc_death.csv")
data_incidence = read.csv("Data/IS608/mdg_tuberc_incidence.csv")
data_co2 = read.csv("Data/IS608/mdg_co2_emissions.csv")
data_ozone_all = read.csv("Data/IS608/mdg_ozone_all.csv")
data_ozone_cfc = read.csv("Data/IS608/mdg_ozone_cfc.csv")
data_slum = read.csv("Data/IS608/mdg_slum_pop.csv")
data_und_nourish = read.csv("Data/IS608/mdg_under_nourished_pop.csv")
data_co2 = data_co2[,-c(30,31,32)]
data_ozone_all = data_ozone_all[,-c(30,31,32)]
data_ozone_cfc = data_ozone_cfc[,-c(30,31,32)]
data_slum = data_slum[,-c(30,31,32)]
data_und_nourish = data_und_nourish[,-c(30,31,32)]
clean_datasets = function(dataset){
dataset = dataset %>% gather("year","n", 6:29)
dataset[,"year"] = gsub("X","",dataset[,"year"])
dataset$year = as.numeric(dataset$year)
return(dataset)
}
data_death = clean_datasets(data_death)
data_incidence = clean_datasets(data_incidence)
data_co2 = clean_datasets(data_co2)
data_ozone_all = clean_datasets(data_ozone_all)
data_ozone_cfc = clean_datasets(data_ozone_cfc)
data_slum = clean_datasets(data_slum)
data_und_nourish = clean_datasets(data_und_nourish)
data_death = data_death %>%
filter(str_detect(data_death[,"Series"], "mid-point")) %>%
select(-c(CountryCode, MDG, Series,SeriesCode))
data_incidence = data_incidence %>%
filter(str_detect(data_incidence[, "Series"], "mid-point")) %>%
select(-c(CountryCode, MDG, Series,SeriesCode))
View(data_co2)
data_death = read.csv("Data/IS608/mdg_tuberc_death.csv")
data_incidence = read.csv("Data/IS608/mdg_tuberc_incidence.csv")
data_co2 = read.csv("Data/IS608/mdg_co2_emissions.csv")
data_ozone_all = read.csv("Data/IS608/mdg_ozone_all.csv")
data_ozone_cfc = read.csv("Data/IS608/mdg_ozone_cfc.csv")
data_slum = read.csv("Data/IS608/mdg_slum_pop.csv")
data_und_nourish = read.csv("Data/IS608/mdg_under_nourished_pop.csv")
data_co2 = data_co2[,-c(30,31,32)]
data_ozone_all = data_ozone_all[,-c(30,31,32)]
data_ozone_cfc = data_ozone_cfc[,-c(30,31,32)]
data_slum = data_slum[,-c(30,31,32)]
data_und_nourish = data_und_nourish[,-c(30,31,32)]
data_death = clean_datasets(data_death)
data_incidence = clean_datasets(data_incidence)
data_co2 = clean_datasets(data_co2)
data_ozone_all = clean_datasets(data_ozone_all)
data_ozone_cfc = clean_datasets(data_ozone_cfc)
data_slum = clean_datasets(data_slum)
data_und_nourish = clean_datasets(data_und_nourish)
data_death = data_death %>%
filter(str_detect(data_death[,"Series"], "mid-point")) #%>% select(-c(CountryCode, MDG, Series,SeriesCode))
data_incidence = data_incidence %>%
filter(str_detect(data_incidence[, "Series"], "mid-point")) #%>% select(-c(CountryCode, MDG, Series,SeriesCode))
View(data_co2)
data_death = data_death %>%
filter(str_detect(data_death[,"Series"], "mid-point")) #%>% select(-c(CountryCode, MDG, SeriesCode))
data_incidence = data_incidence %>%
filter(str_detect(data_incidence[, "Series"], "mid-point")) #%>% select(-c(CountryCode, MDG, SeriesCode))
# Union to combine into master clean long format
library(tidyr)
library(dplyr)
library(stringr)
setwd("~")
data_death = read.csv("Data/IS608/mdg_tuberc_death.csv")
data_incidence = read.csv("Data/IS608/mdg_tuberc_incidence.csv")
data_co2 = read.csv("Data/IS608/mdg_co2_emissions.csv")
data_ozone_all = read.csv("Data/IS608/mdg_ozone_all.csv")
data_ozone_cfc = read.csv("Data/IS608/mdg_ozone_cfc.csv")
data_slum = read.csv("Data/IS608/mdg_slum_pop.csv")
data_und_nourish = read.csv("Data/IS608/mdg_under_nourished_pop.csv")
data_co2 = data_co2[,-c(30,31,32)]
data_ozone_all = data_ozone_all[,-c(30,31,32)]
data_ozone_cfc = data_ozone_cfc[,-c(30,31,32)]
data_slum = data_slum[,-c(30,31,32)]
data_und_nourish = data_und_nourish[,-c(30,31,32)]
clean_datasets = function(dataset){
dataset = dataset %>% gather("year","n", 6:29)
dataset[,"year"] = gsub("X","",dataset[,"year"])
dataset$year = as.numeric(dataset$year)
dataset = dataset %>% select(-c(CountryCode, MDG, SeriesCode))  # remove these extra variables
return(dataset)
}
data_death = clean_datasets(data_death)
data_incidence = clean_datasets(data_incidence)
data_co2 = clean_datasets(data_co2)
data_ozone_all = clean_datasets(data_ozone_all)
data_ozone_cfc = clean_datasets(data_ozone_cfc)
data_slum = clean_datasets(data_slum)
data_und_nourish = clean_datasets(data_und_nourish)
data_death = data_death %>%
filter(str_detect(data_death[,"Series"], "mid-point")) #%>% select(-c(CountryCode, MDG, SeriesCode))
data_incidence = data_incidence %>%
filter(str_detect(data_incidence[, "Series"], "mid-point")) #%>% select(-c(CountryCode, MDG, SeriesCode))
save.image("~/Documents/CUNY/Viz/Final/clean_datasets.rda.RData")
mdg_data_master = do.call("rbind",list(
data_death,data_incidence, data_co2,data_ozone_all,data_ozone_cfc, data_slum,data_und_nourish)
)
View(mdg_data_master)
str(mdg_data_master$Series)
levels(mdg_data_master$Series)
data_death = clean_datasets(data_death)
data_incidence = clean_datasets(data_incidence)
data_co2 = clean_datasets(data_co2)
data_ozone_all = clean_datasets(data_ozone_all)
data_ozone_cfc = clean_datasets(data_ozone_cfc)
data_slum = clean_datasets(data_slum)
data_und_nourish = clean_datasets(data_und_nourish)
data_death = data_death %>%
filter(str_detect(data_death[,"Series"], "mid-point"))
data_incidence = data_incidence %>%
filter(str_detect(data_incidence[, "Series"], "mid-point"))
mdg_data_master = do.call("rbind",list(
data_death,data_incidence, data_co2,data_ozone_all,data_ozone_cfc, data_slum,data_und_nourish)
)
levels(mdg_data_master$Series)
View(data_death)
levels(data_death$Series)
data_death$Series
levels(data_death$Series)
write.csv(data_death,file="~/Documents/CUNY/Viz/Final/Data/tuberc_death_cln.csv",quote = TRUE,row.names = FALSE)
write.csv(data_incidence, file="~/Documents/CUNY/Viz/Final/Data/tuberc_incid_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_incidence, file="~/Documents/CUNY/Viz/Final/Data/co2_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_incidence, file="~/Documents/CUNY/Viz/Final/Data/ozone_all_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_incidence, file="~/Documents/CUNY/Viz/Final/Data/ozone_cfc_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_incidence, file="~/Documents/CUNY/Viz/Final/Data/data_slum_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_incidence, file="~/Documents/CUNY/Viz/Final/Data/data_und_nourish_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_death,file="~/Documents/CUNY/Viz/Final/Data/tuberc_death_cln.csv",quote = TRUE,row.names = FALSE)
write.csv(data_incidence, file="~/Documents/CUNY/Viz/Final/Data/tuberc_incid_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_co2, file="~/Documents/CUNY/Viz/Final/Data/co2_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_ozone_all, file="~/Documents/CUNY/Viz/Final/Data/ozone_all_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_ozone_cfc, file="~/Documents/CUNY/Viz/Final/Data/ozone_cfc_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_slum, file="~/Documents/CUNY/Viz/Final/Data/data_slum_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(data_und_nourish, file="~/Documents/CUNY/Viz/Final/Data/data_und_nourish_cln.csv", quote = TRUE, row.names=FALSE)
write.csv(mdg_data_master, file="~/Documents/CUNY/Viz/Final/Data/mdg_master_cln.csv", quote = TRUE, row.names=FALSE)
save.image("~/Documents/CUNY/Viz/Final/clean_datasets.RData")
shiny::runApp('Documents/CUNY/Viz/Final/Main')
shiny::runApp('Documents/CUNY/Viz/Final/Main')
library(shiny)
shiny::runApp('Documents/CUNY/Viz/Final/Main')
shiny::runApp('Documents/CUNY/Viz/Final/Main')
shiny::runApp('Documents/CUNY/Viz/Final/Main')
shiny::runApp('Documents/CUNY/Viz/Final/Main')
shiny::runApp('Documents/CUNY/Viz/Final/Main')
shiny::runApp('Documents/CUNY/Viz/Final/Main')
shiny::runApp('Documents/CUNY/Viz/Final/Main')
setwd(~/Documents/CUNY/Viz/Final/Main)
setwd("~/Documents/CUNY/Viz/Final/Main")
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
data_master = read.csv("./Data/mdg_master_cln.csv")
shiny::runApp()
rm(data_master)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
